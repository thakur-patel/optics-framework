{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Optics Framework","text":"<p>Welcome to the official documentation for the Optics Framework, an open-source test automation framework designed to simplify and streamline the creation and execution of automated tests across various platforms. Whether you're testing mobile apps (including DRM-enabled ones), Optics Framework provides a flexible, extensible, and user-friendly solution to meet your testing needs.</p>"},{"location":"#explore","title":"Explore","text":"<ul> <li>Introduction to the framework</li> <li>Contribution guidelines</li> <li>User workflow</li> <li>Developer guide</li> <li>Usage</li> <li>API reference</li> <li>Additional Resources</li> <li>License</li> <li>Code of Conduct</li> </ul>"},{"location":"introduction/","title":"Introduction","text":"<p>Optics Framework is a test automation framework that simplifies the creation and execution of automated tests across both iOS and Android platforms. It provides a flexible, extensible, and user-friendly solution to meet your testing needs. It offers a modular architecture paired with a command-line interface (CLI) that enables testers and developers to define test cases, manage test data, and execute tests with ease.</p> <ul> <li>Supported Platforms: iOS, Android, Browsers, smart TVs(BLE enabled)</li> <li>Modular Design: Extend and customize the framework to fit your specific requirements.</li> <li>Ease of Use: Intuitive CLI and helper utilities simplify the testing workflow.</li> </ul> <p>Whether you're a beginner looking to automate your first test or an experienced developer contributing new features, the Optics Framework is designed to empower you.</p>"},{"location":"introduction/#license","title":"License","text":"<p>The Optics Framework is licensed under the Apache License 2.0, which can be found here. This permissive license allows you to use, modify, and distribute the software freely, as long as you comply with its terms.</p> <p>Key points to remember:</p> <ul> <li>Redistributions of the code must include a copy of the license and any relevant notices. If you modify the code, you should also document your changes.</li> <li>The software is provided \"as is\" without any warranties, meaning the contributors are not liable for any issues that arise from its use.</li> <li>This license allows you to use, modify, distribute, and even sublicense the software with minimal restrictions.</li> </ul>"},{"location":"user_workflow/","title":"User Workflow","text":"<p>This guide walks you through the workflow for using the Optics Framework to create and execute automated tests. The framework relies on a CSV-based structure and a YAML configuration file to define test cases, modules, and elements.</p>"},{"location":"user_workflow/#initial-setup","title":"Initial Setup","text":"<p>To begin, the Optics Framework requires at least one YAML configuration file (<code>config.yaml</code>) and CSV files to define your tests. You can bootstrap a project using the <code>optics init</code> command:</p> <pre><code>optics init --name youtube --path ./youtube\n</code></pre> <ul> <li>--name: Specifies the project name (e.g., <code>youtube</code>).</li> <li>--path: Defines where the project folder will be created.</li> <li>--template: (Optional) Uses a predefined sample template to populate initial files.</li> </ul> <p>This command generates a project directory with a default structure, including a <code>config.yaml</code> and placeholder CSV files.</p>"},{"location":"user_workflow/#csv-use-cases","title":"CSV Use Cases","text":"<p>The framework uses three primary CSV files to organize test logic: <code>test_cases.csv</code>, <code>test_modules.csv</code>, and <code>elements.csv</code>. Below are their purposes and examples.</p>"},{"location":"user_workflow/#test_casescsv","title":"test_cases.csv","text":"<p>This file defines test cases and links them to specific test steps (modules). It has two columns: <code>test_case</code> and <code>test_step</code>.</p> <p>Example:</p> <pre><code>test_case,test_step\nRunning youtube using text,Launching App using text\nRunning youtube unknown,Repeat Test\n</code></pre> <ul> <li>test_case: The name of the test case.</li> <li>test_step: The module or step to execute for that test case.</li> </ul> <pre><code>test_case,test_step\nSuite Setup, Launch youtube app\nSuite Teardown, Terminate youtube app\nSetup, Load home page\nTeardown, Return to Home Page\nRunning youtube using text,Launching App using text\nRunning youtube unknown,Repeat Test\n</code></pre> <p>Suite Setup/Teardown and Test Case Setup/Teardown</p> <p>You can define setup and teardown steps in the test_cases.csv to ensure proper initialization and cleanup for both the entire test suite and individual test cases.</p>"},{"location":"user_workflow/#test_modulescsv","title":"test_modules.csv","text":"<p>This file lists all modules, their steps, and associated parameters. Columns include <code>module_name</code>, <code>module_step</code>, and optional <code>param_1</code> to <code>param_n</code> (as many parameters as needed).</p> <p>Example:</p> <pre><code>module_name,module_step,param_1,param_2,param_3,param_4,param_5\nLaunching App using text,Launch App,,,,\nLaunching App using text,Press Element,//android.widget.Button[@resource-id=\"com.android.permissioncontroller:id/permission_allow_button\"],,,\nInteract using text,Assert Presence,${Subscriptions_text},,,\nInteract using text,Press Element,${Subscriptions_text},,,\nInteract using text,Press Element,${Home_text},,,\nInteract using xpath,Assert Presence,${Subscriptions_xpath},,,\nInteract using xpath,Press Element,${Subscriptions_xpath},,,\nInteract using xpath,Press Element,${Home_xpath},,,\nInteract using images,Press Element,${Subscriptions_image},,,\nInteract using images,Press Element,${Home_image},,,\nDynamic Launch,condition,${METHOD} == 'text',Interact using text,${METHOD} == 'xpath',Interact using xpath,Interact using images\nRepeat Test,Run Loop,Dynamic Launch,${METHOD},${List}\n</code></pre> <ul> <li>module_name: The name of the module.</li> <li>module_step: A keyword or action (e.g., <code>Launch App</code>, <code>Press Element</code>). See Keywords Reference for a full list.</li> <li>param_1, param_2, ...: Parameters for the action, such as element IDs or conditions.</li> </ul>"},{"location":"user_workflow/#elementscsv","title":"elements.csv","text":"<p>This file acts as a variable store, mapping element names to their identifiers (e.g., XPath, text, or image files).</p> <p>Example:</p> <pre><code>Element_Name,Element_ID\nSubscriptions_xpath,//android.widget.TextView[@resource-id=\"com.google.android.youtube:id/text\" and @text=\"Subscriptions\"]\nyou_xpath,(//android.widget.ImageView[@resource-id=\"com.google.android.youtube:id/image\"])[4]\nHome_xpath,//android.widget.TextView[@resource-id=\"com.google.android.youtube:id/text\" and @text=\"Home\"]\nSubscriptions_text,Subscriptions\nyou_text,Library\nHome_text,Home\nSubscriptions_image,sub.jpeg\nYoutube_image,youtube.jpeg\nHome_image,home.png\nMETHOD,None\nList,\"[\"\"xpath\"\",\"\"text\"\",\"\"images\"\"]\"\n</code></pre> <ul> <li>Element_Name: The variable name used in <code>test_modules.csv</code>.</li> <li>Element_ID: The actual identifier (e.g., XPath, text value, or image filename).</li> </ul>"},{"location":"user_workflow/#configuration-file-configyaml","title":"Configuration File (config.yaml)","text":"<p>The <code>config.yaml</code> file specifies the driver and detection methods for your project. Below is an example tailored for an Android YouTube app test:</p> <pre><code>driver_sources:\n  - appium:\n      enabled: true\n      url: \"http://localhost:4723\"\n      capabilities:\n        appActivity: \"com.google.android.youtube.app.honeycomb.Shell$HomeActivity\"\n        appPackage: \"com.google.android.youtube\"\n        automationName: \"UiAutomator2\"\n        deviceName: \"emulator-5554\"\n        platformName: \"Android\"\n\nelements_sources:\n  - appium_find_element:\n      enabled: true\n      url: null\n      capabilities: {}\n  - appium_screenshot:\n      enabled: true\n      url: null\n      capabilities: {}\n\n\ntext_detection:\n  - easyocr:\n      enabled: true\n      url: null\n      capabilities: {}\n\nimage_detection:\n  - templatematch:\n      enabled: true\n      url: null\n      capabilities: {}\n\nlog_level: INFO\n\ninclude:\n- \"Test cases to be included\"\n\nexclude:\n- \"Test Cases to be excluded\"\n</code></pre> <ul> <li>driver_sources: Defines the automation driver (e.g., Appium for Android).</li> <li>elements_sources: Specifies how elements are located (e.g., Appium or screenshots).</li> <li>text_detection: Configures text recognition tools (e.g., EasyOCR).</li> <li>image_detection: Sets up image matching (e.g., Template Matching).</li> <li>include: Test cases to be executed, the rest of the test cases will be skipped.</li> <li>exclude: Specified test cases to be skipped, all other test cases will be executed.</li> </ul>"},{"location":"user_workflow/#project-structure","title":"Project Structure","text":"<p>Your project folder should look like this:</p> <pre><code>/youtube\n\u251c\u2500\u2500 config.yaml\n\u251c\u2500\u2500 elements.csv\n\u251c\u2500\u2500 execution_output\n\u2502   \u2514\u2500\u2500 logs.log\n\u251c\u2500\u2500 input_templates\n\u2502   \u251c\u2500\u2500 home.png\n\u2502   \u251c\u2500\u2500 sub.jpeg\n\u2502   \u2514\u2500\u2500 youtube.jpeg\n\u251c\u2500\u2500 test_cases.csv\n\u2514\u2500\u2500 test_modules.csv\n</code></pre> <ul> <li>input_templates/: Store any input images (e.g., <code>home.png</code>) referenced in <code>elements.csv</code>.</li> <li>execution_output/: Contains logs and other output generated during test runs.</li> </ul>"},{"location":"user_workflow/#using-keywords-in-modules","title":"Using Keywords in Modules","text":"<p>Modules in <code>test_modules.csv</code> use a predefined set of keywords (e.g., <code>Launch App</code>, <code>Press Element</code>, <code>Assert Presence</code>). For a complete list, refer to the Keywords Reference.</p>"},{"location":"user_workflow/#samples-for-your-reference","title":"Samples For Your Reference","text":"<p>Sample test scripts are provided to demonstrate the framework\u2019s capabilities and guide users in writing their own. These examples show how texts, XPaths, and images can be used interchangeably, and how test data can be structured using CSV files.</p> <p>\ud83d\udcc5 Calendar</p> <p>Calendar sample showcases how our framework supports dynamic data fetching using APIs (e.g. fetching current date) and apply natural date evaluations to compute future dates on the fly.</p> <p>\ud83d\udcfa Youtube</p> <p>Youtube sample showcases our framework's ability to interact with the devices using multiple element types such as texts, xpaths and images.</p> <p>\ud83d\udc65 Contact</p> <p>Contact example showcases form input automation, screen validation using dynamic element assertions, and how structured test data (like ${First_Name}) can be reused across steps.</p> <p>\ud83d\udce7 Gmail Website</p> <p>A Selenium-based sample that automates Gmail sign-in and account creation. It includes clicking on buttons like \u201cSign in\u201d and \u201cCreate an account,\u201d and entering user credentials, showcasing web interaction using text-based locators.</p>"},{"location":"user_workflow/#validating-your-setup","title":"Validating Your Setup","text":"<p>To check for syntactical errors in your CSV files and configuration, run a dry run:</p> <pre><code>optics dry_run ./youtube\n</code></pre> <p>For a specific test case:</p> <pre><code>optics dry_run ./youtube --test-case \"Running youtube using text\"\n</code></pre> <p>This command simulates the test execution without interacting with the device, helping you catch issues early.</p>"},{"location":"user_workflow/#executing-tests","title":"Executing Tests","text":"<p>Once validated, execute your tests with:</p> <pre><code>optics execute ./youtube\n</code></pre> <ul> <li>./youtube: Path to your project directory.</li> <li>--test-cases: Path to the <code>test_cases.csv</code> file.</li> </ul> <p>Output, including logs, will be saved in the <code>execution_output/</code> folder.</p>"},{"location":"contribution/code_of_conduct/","title":"Code of Conduct","text":""},{"location":"contribution/code_of_conduct/#our-pledge","title":"Our Pledge","text":"<p>We, as contributors and maintainers of the Optics Framework, pledge to make participation in our project and community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.</p>"},{"location":"contribution/code_of_conduct/#our-standards","title":"Our Standards","text":"<p>Examples of behavior that contributes to a positive environment include:</p> <ul> <li>Using welcoming and inclusive language.</li> <li>Being respectful of differing viewpoints and experiences.</li> <li>Gracefully accepting constructive criticism.</li> <li>Focusing on what is best for the community.</li> <li>Showing empathy towards other community members.</li> </ul> <p>Examples of unacceptable behavior include:</p> <ul> <li>The use of sexualized language or imagery and unwelcome sexual attention or advances.</li> <li>Trolling, insulting/derogatory comments, and personal or political attacks.</li> <li>Public or private harassment.</li> <li>Publishing others' private information, such as a physical or electronic address, without explicit permission.</li> <li>Other conduct which could reasonably be considered inappropriate in a professional setting.</li> </ul>"},{"location":"contribution/code_of_conduct/#our-responsibilities","title":"Our Responsibilities","text":"<p>Project maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response to any instances of unacceptable behavior.</p> <p>Maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned with this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.</p>"},{"location":"contribution/code_of_conduct/#scope","title":"Scope","text":"<p>This Code of Conduct applies both within project spaces (e.g., GitHub repository, issue trackers, documentation) and in public spaces when an individual is representing the Optics Framework or its community.</p>"},{"location":"contribution/code_of_conduct/#enforcement","title":"Enforcement","text":"<p>Instances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project maintainers at [TODO: Add Lalit's sir email]. All complaints will be reviewed and investigated and will result in a response that is deemed necessary and appropriate to the circumstances. Maintainers are obligated to maintain confidentiality with regard to the reporter of an incident.</p>"},{"location":"contribution/code_of_conduct/#attribution","title":"Attribution","text":"<p>This Code of Conduct is adapted from the Contributor Covenant, version 2.1, available at https://www.contributor-covenant.org/version/2/1/code_of_conduct/.</p>"},{"location":"contribution/contributing_guidelines/","title":"Contributing Guidelines","text":"<p>Before Contributing</p> <p>Before contributing, please read our Code of Conduct to understand the standards of behavior we expect from our contributors.</p> <p>Welcome to the contributing guidelines for the Optics Framework! We appreciate your interest in contributing to our project.</p>"},{"location":"contribution/contributing_guidelines/#how-to-contribute","title":"How to Contribute","text":"<p>We welcome contributions in the form of bug reports, feature requests, documentation improvements, and code contributions. To contribute, follow these steps:</p> <ul> <li> <p>Fork the Repository: Click the \"Fork\" button on the top right of the repository page to create a copy of the repository in your GitHub account.</p> </li> <li> <p>Clone the Repository: Clone the forked repository to your local machine using the following command:</p> </li> </ul> <pre><code>git clone &lt;your_forked_repository_url&gt;\n</code></pre> <ul> <li>Create a Branch: Create a new branch for your contribution using the following command:</li> </ul> <pre><code>git checkout -b &lt;branch_name&gt;\n</code></pre> <ul> <li> <p>Make Changes: Make your changes to the codebase, documentation, or tests.</p> </li> <li> <p>Commit Changes: Commit your changes with a descriptive commit message.</p> </li> </ul> <p>Commit Message Format</p> <p>Ensure that your commit messages follow the Conventional Commits format for consistency and clarity (e.g., <code>feat: add new feature</code>, <code>fix: resolve bug #123</code>).</p> <p>Signing Commits</p> <p>Sign your commits using the Developer Certificate of Origin (DCO) to certify your contribution. Use <code>git commit -s</code> to add a <code>Signed-off-by</code> line.</p> <ul> <li> <p>Push Changes: Push your changes to your forked remote repository.</p> </li> <li> <p>Create a Pull Request: Create a pull request from your forked repository to the main repository.</p> </li> </ul> <p>Referencing Issues in Pull Requests</p> <p>If you are fixing an issue, reference the issue number in your pull request message using the format <code>Fixes #&lt;issue_number&gt;</code> to link it automatically.</p> <ul> <li>Review and Merge: The maintainers will review your pull request and merge it if it meets the project's guidelines.</li> </ul>"},{"location":"contribution/contributing_guidelines/#reporting-issues","title":"Reporting Issues","text":"<p>To report a bug, follow these steps:</p> <ol> <li> <p>Check Existing Issues: Check if the bug has already been reported by searching the existing issues.</p> </li> <li> <p>Create a New Issue: If the bug has not been reported, create a new issue with the following details:</p> </li> <li> <p>Issue Title: A descriptive title that summarizes the bug.</p> </li> <li> <p>Description: A detailed description of the bug, including steps to reproduce it.</p> </li> <li> <p>Expected Behavior: A description of what you expected to happen.</p> </li> <li> <p>Actual Behavior: A description of what actually happened.</p> </li> <li> <p>Environment: Details about your environment, such as the operating system, Python version, and any other relevant information.</p> </li> <li> <p>Screenshots: If applicable, include screenshots that help illustrate the bug.</p> </li> <li> <p>Labels: Add appropriate labels to the issue, such as <code>bug</code> or <code>enhancement</code>.</p> </li> </ol>"},{"location":"contribution/developer_guide/","title":"Developer Guide","text":"<p>This section provides guidelines for developers who want to contribute to the Optics Framework.</p> <p>Note: Before contributing, please read our Contributing Guidelines to understand the contribution process.</p>"},{"location":"contribution/developer_guide/#1-setting-up-the-development-environment","title":"1. Setting Up the Development Environment","text":"<p>To set up the development environment for the Optics Framework, follow these steps:</p>"},{"location":"contribution/developer_guide/#clone-the-repository","title":"Clone the Repository","text":"<p>Clone the Optics Framework repository to your local machine using the following command:</p> <pre><code>git clone &lt;repository_url&gt;\ncd optics-framework\n</code></pre>"},{"location":"contribution/developer_guide/#install-dependencies","title":"Install Dependencies","text":"<p>Install the required dependencies using the following command:</p> <pre><code>pipx install poetry\n</code></pre> <p>For changes related to source code:</p> <pre><code>poetry install --with dev\n</code></pre> <p>For changes related to documentation:</p> <pre><code>poetry install --with docs\n</code></pre> <p>For default installation:</p> <pre><code>poetry install\n</code></pre> <p>NOTE: We recommend using <code>poetry</code> to manage dependencies and virtual environments for the project. NOTE: For more info about <code>pipx</code> and <code>poetry</code>, refer to the pipx documentation and poetry documentation.</p>"},{"location":"contribution/developer_guide/#2-create-a-new-branch","title":"2. Create a New Branch","text":"<p>Before making any changes to the codebase, create a new branch for your contribution using the following command:</p> <pre><code>git checkout -b &lt;branch_name&gt;\n</code></pre>"},{"location":"contribution/developer_guide/#3-make-changes","title":"3. Make Changes","text":"<p>Work on your feature, bug fix, or documentation improvement in the appropriate directory:</p> <ul> <li>Source code: <code>optics_framework/</code></li> <li>Tests: <code>tests/</code></li> <li>Documentation: <code>docs/</code></li> </ul>"},{"location":"contribution/developer_guide/#source-code-changes","title":"Source Code Changes","text":"<ul> <li>Make changes to the source code in the <code>optics_framework/</code> directory.</li> </ul> <p>Adhere to the project\u2019s coding standards: Use Black for linting and formatting:</p> <pre><code>poetry run black .\n</code></pre>"},{"location":"contribution/developer_guide/#documentation-changes","title":"Documentation Changes","text":"<ul> <li>Make changes to the documentation in the <code>docs/</code> directory.</li> <li>Ensure the documentation is clear, concise, and follows the style guide.</li> <li>Use Sphinx for generating documentation.</li> </ul> <p>For live changes while working on documentation: Use Sphinx to automatically rebuild your documentation as you make changes:</p> <pre><code>poetry run sphinx-autobuild docs/source docs/build/html\n</code></pre>"},{"location":"contribution/developer_guide/#run-tests","title":"Run Tests","text":"<p>Run the tests to ensure that your changes do not break existing functionality:</p> <pre><code>poetry run pytest\n</code></pre>"},{"location":"contribution/developer_guide/#packaging","title":"Packaging","text":"<p>To build the package:</p> <pre><code>poetry build\n</code></pre>"},{"location":"contribution/developer_guide/#4-commit-changes","title":"4. Commit Changes","text":"<ul> <li>Adhere to the Conventional Commits format for your commit messages.</li> </ul>"},{"location":"usage/CLI_usage/","title":"CLI Guide","text":"<p>This section describes the available commands for the <code>optics-framework</code> CLI.</p>"},{"location":"usage/CLI_usage/#setup-optics-framework","title":"Setup Optics Framework","text":"<p>To set up the Optics Framework, use the following command:</p> <p>To list all possible drivers:</p> <pre><code>optics setup --list\n</code></pre> <p>TUI way:</p> <pre><code>optics setup\n</code></pre> <p>CLI way:</p> <pre><code>optics setup --install &lt;driver_name1&gt; &lt;driver_name2&gt; ...\n</code></pre>"},{"location":"usage/CLI_usage/#executing-test-cases","title":"Executing Test Cases","text":"<p>Run test cases with the following command:</p> <pre><code>optics execute &lt;project_path&gt; --test-cases &lt;test_case_name&gt; --runner &lt;runner_name&gt;\n</code></pre> <p>Options:</p> <ul> <li><code>&lt;project_path&gt;</code>: Path to the project directory.</li> <li><code>--test-cases &lt;test_case_name&gt;</code>: Path to the test cases file.</li> <li><code>--runner &lt;runner_name&gt;</code>: Specify the test runner to use. [Current support: <code>test_runner</code> (default), <code>pytest</code>]</li> </ul>"},{"location":"usage/CLI_usage/#initializing-a-new-project","title":"Initializing a New Project","text":"<p>Use the following command to initialize a new project:</p> <pre><code>optics init --name &lt;project_name&gt; --path &lt;directory&gt; --template &lt;sample_name&gt; --git-init\n</code></pre> <p>Options:</p> <ul> <li><code>--name &lt;project_name&gt;</code>: Name of the project.</li> <li><code>--path &lt;directory&gt;</code>: Directory to create the project in.</li> <li><code>--force</code>: Overwrite existing files if necessary.</li> <li><code>--template &lt;sample_name&gt;</code>: Choose a predefined example.</li> <li><code>--git-init</code>: Initialize a Git repository.</li> </ul>"},{"location":"usage/CLI_usage/#generating-code","title":"Generating Code","text":"<p>TODO</p> <p>Generate test automation code from an input CSV file:</p> <pre><code>optics generate &lt;input_csv&gt; --output &lt;output_generated_code&gt;\n</code></pre> <p>Options:</p> <ul> <li><code>&lt;input_csv&gt;</code>: Path to the input CSV file.</li> <li><code>--output &lt;output_generated_code&gt;</code>: Specify the output file.</li> </ul>"},{"location":"usage/CLI_usage/#listing-available-keywords","title":"Listing Available Keywords","text":"<p>Display a list of all available keywords:</p> <pre><code>optics list\n</code></pre>"},{"location":"usage/CLI_usage/#executing-dry-run","title":"Executing Dry Run","text":"<p>Execute a dry run of all test cases:</p> <pre><code>optics dry_run &lt;project_path&gt;\n</code></pre> <p>Execute a dry run of a specific test case:</p> <pre><code>optics dry_run &lt;project_path&gt; --test-case \"&lt;test-case-name&gt;\"\n</code></pre> <p>Options:</p> <ul> <li><code>&lt;project_path&gt;</code>: Path to the project directory.</li> <li><code>--test-case \"&lt;test-case-name&gt;\"</code>: Specify the test case to execute.</li> </ul>"},{"location":"usage/CLI_usage/#showing-help-information","title":"Showing Help Information","text":"<p>Get help for the CLI:</p> <pre><code>optics-framework --help\n</code></pre>"},{"location":"usage/CLI_usage/#managing-configuration","title":"Managing Configuration","text":"<p>Set, reset, or list configuration values:</p> <pre><code>optics-framework config --set &lt;key&gt; &lt;value&gt; --reset --list\n</code></pre> <p>Options:</p> <ul> <li><code>--set &lt;key&gt; &lt;value&gt;</code>: Set a configuration key-value pair.</li> <li><code>--reset</code>: Reset all configurations to default.</li> <li><code>--list</code>: Display current configuration values.</li> </ul>"},{"location":"usage/CLI_usage/#checking-version","title":"Checking Version","text":"<p>Check the installed version of <code>optics-framework</code>:</p> <pre><code>optics-framework --version\n</code></pre>"},{"location":"usage/CLI_usage/#additional-information","title":"Additional Information","text":"<p>Command Usage</p> <p>All commands assume <code>optics-framework</code> is installed and accessible in your terminal. Use <code>pip install optics-framework</code> if not already installed.</p> <p>Optional Parameters</p> <p>Options like <code>--runner</code>, <code>--force</code>, and <code>--git-init</code> are optional. Omit them to use defaults (e.g., <code>test_runner</code> for <code>--runner</code>).</p> <p>TODO Section</p> <p>The <code>Generating Code</code> section is marked as TODO, indicating it\u2019s not yet fully implemented or documented. Functionality may be limited.</p> <p>Driver Installation</p> <p>When using <code>optics setup --install</code>, ensure <code>&lt;driver_name1&gt; &lt;driver_name2&gt; ...</code> matches available drivers listed by <code>optics setup --list</code>.</p> <p>Dry Run Specificity</p> <p>Use <code>--test-case \"&lt;test-case-name&gt;\"</code> with <code>optics dry_run</code> to test a single case without affecting others, ideal for debugging.</p> <p>Configuration Persistence</p> <p>Changes made with <code>optics-framework config --set</code> persist across sessions unless reset with <code>--reset</code>.</p>"},{"location":"usage/keyword_usage/","title":"Keyword Usage","text":"<p>This document outlines the available keywords for the Optics Framework, which can be used in the <code>test_modules.csv</code> file to define test steps. Keywords are derived from the framework's Python API, with method names converted to a space-separated format (e.g., <code>press_element</code> becomes <code>Press Element</code>). Each keyword corresponds to a specific action, verification, or control flow operation. Below, each keyword includes detailed parameter explanations to guide their usage.</p>"},{"location":"usage/keyword_usage/#action-keywords","title":"Action Keywords","text":"<p>These keywords handle interactions with the application, such as clicking, swiping, and text input.</p> <ul> <li>Press Element   Presses a specified element on the screen.</li> <li>Parameters:<ul> <li><code>element</code>: The target to press. Can be:</li> <li>Text: A string to locate via text detection (e.g., \"Home\", <code>${Home_text}</code>).</li> <li>XPath: An XPath expression for Appium/Selenium (e.g., <code>//android.widget.Button[@resource-id=\"id\"]</code>).</li> <li>Image: A filename of an image in <code>input_templates/</code> (e.g., \"home.png\", <code>${Home_image}</code>).</li> <li><code>repeat</code> (optional, default=1): Number of times to press the element (integer).</li> <li><code>offset_x</code> (optional, default=0): Horizontal offset in pixels from the element\u2019s center (integer).</li> <li><code>offset_y</code> (optional, default=0): Vertical offset in pixels from the element\u2019s center (integer).</li> <li><code>event_name</code> (optional): A string identifier for logging or triggering events (e.g., \"click_home\").</li> </ul> </li> <li> <p>Example: <code>Press Element,${Subscriptions_text},2,10,20,click_event</code></p> </li> <li> <p>Press By Percentage   Presses at percentage-based coordinates on the screen.</p> </li> <li>Parameters:<ul> <li><code>percent_x</code>: X-coordinate as a percentage of screen width (float, 0.0 to 1.0, e.g., 0.5 for 50%).</li> <li><code>percent_y</code>: Y-coordinate as a percentage of screen height (float, 0.0 to 1.0).</li> <li><code>repeat</code> (optional, default=1): Number of times to press (integer).</li> <li><code>event_name</code> (optional): A string identifier for the press event (e.g., \"center_press\").</li> </ul> </li> <li> <p>Example: <code>Press By Percentage,0.5,0.5,,press_center</code></p> </li> <li> <p>Press By Coordinates   Presses at absolute coordinates on the screen.</p> </li> <li>Parameters:<ul> <li><code>coor_x</code>: X-coordinate in pixels (integer, e.g., 500).</li> <li><code>coor_y</code>: Y-coordinate in pixels (integer, e.g., 800).</li> <li><code>repeat</code> (optional, default=1): Number of times to press (integer).</li> <li><code>event_name</code> (optional): A string identifier for the press event (e.g., \"tap_event\").</li> </ul> </li> <li> <p>Example: <code>Press By Coordinates,500,800,,tap_event</code></p> </li> <li> <p>Press Element With Index   Presses an element (text or image) at a specified index if multiple matches exist.</p> </li> <li>Parameters:<ul> <li><code>element</code>: The target to press:</li> <li>Text: A string to locate via text detection (e.g., \"Home\").</li> <li>Image: An image filename (e.g., \"home.png\").</li> <li>Note: XPath is not supported for index-based pressing.</li> <li><code>index</code> (optional, default=0): The index of the element to press if multiple are found (integer, 0-based).</li> <li><code>event_name</code> (optional): A string identifier for the press event (e.g., \"home_click\").</li> </ul> </li> <li> <p>Example: <code>Press Element With Index,${Home_text},1,home_click</code></p> </li> <li> <p>Detect And Press   Detects an element and presses it if found within a timeout.</p> </li> <li>Parameters:<ul> <li><code>element</code>: The target to detect and press:</li> <li>Text: A string (e.g., \"Subscriptions\").</li> <li>XPath: An XPath expression (e.g., <code>//android.widget.TextView[@text=\"Home\"]</code>).</li> <li>Image: An image filename (e.g., \"sub.jpeg\").</li> <li><code>timeout</code>: Maximum time in seconds to wait for detection (integer, e.g., 10).</li> <li><code>event_name</code> (optional): A string identifier for the press event (e.g., \"detect_click\").</li> </ul> </li> <li> <p>Example: <code>Detect And Press,${Subscriptions_image},10,detect_click</code></p> </li> <li> <p>Press Checkbox (Deprecated)   Presses a checkbox element (use <code>Press Element</code> instead).</p> </li> <li>Parameters:<ul> <li><code>element</code>: The checkbox to press:</li> <li>Text: A string (e.g., \" Agree\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.CheckBox</code>).</li> <li>Image: An image filename (e.g., \"checkbox.png\").</li> <li><code>event_name</code> (optional): A string identifier for the press event (e.g., \"toggle\").</li> </ul> </li> <li> <p>Example: <code>Press Checkbox,${checkbox_xpath},toggle</code></p> </li> <li> <p>Press Radio Button (Deprecated)   Presses a radio button element (use <code>Press Element</code> instead).</p> </li> <li>Parameters:<ul> <li><code>element</code>: The radio button to press:</li> <li>Text: A string (e.g., \"Option 1\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.RadioButton</code>).</li> <li>Image: An image filename (e.g., \"radio.png\").</li> <li><code>event_name</code> (optional): A string identifier for the press event (e.g., \"select\").</li> </ul> </li> <li> <p>Example: <code>Press Radio Button,${radio_xpath},select</code></p> </li> <li> <p>Select Dropdown Option   Selects an option from a dropdown (currently unimplemented).</p> </li> <li>Parameters:<ul> <li><code>element</code>: The dropdown element:</li> <li>Text: A string (e.g., \"Dropdown\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.Spinner</code>).</li> <li>Image: An image filename (e.g., \"dropdown.png\").</li> <li><code>option</code>: The option to select (string, e.g., \"Option 1\").</li> <li><code>event_name</code> (optional): A string identifier for the selection event (e.g., \"select_option\").</li> </ul> </li> <li> <p>Example: <code>Select Dropdown Option,${dropdown_xpath},Option 1,select_option</code></p> </li> <li> <p>Swipe   Performs a swipe action from specified coordinates in a direction.</p> </li> <li>Parameters:<ul> <li><code>coor_x</code>: Starting X-coordinate in pixels (integer, e.g., 300).</li> <li><code>coor_y</code>: Starting Y-coordinate in pixels (integer, e.g., 400).</li> <li><code>direction</code> (optional, default=\"right\"): Swipe direction (\"up\", \"down\", \"left\", \"right\").</li> <li><code>swipe_length</code> (optional, default=50): Distance of the swipe in pixels (integer).</li> <li><code>event_name</code> (optional): A string identifier for the swipe event (e.g., \"swipe_up\").</li> </ul> </li> <li> <p>Example: <code>Swipe,300,400,up,100,swipe_up</code></p> </li> <li> <p>Swipe Seekbar To Right Android (Deprecated)   Swipes a seekbar to the right (Android-specific).</p> </li> <li>Parameters:<ul> <li><code>element</code>: The seekbar element:</li> <li>Text: A string (e.g., \"Volume\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.SeekBar</code>).</li> <li>Image: An image filename (e.g., \"seekbar.png\").</li> <li><code>event_name</code> (optional): A string identifier for the swipe event (e.g., \"adjust\").</li> </ul> </li> <li> <p>Example: <code>Swipe Seekbar To Right Android,${seekbar_xpath},adjust</code></p> </li> <li> <p>Swipe Until Element Appears   Swipes in a direction until an element appears or timeout is reached.</p> </li> <li>Parameters:<ul> <li><code>element</code>: The target element:</li> <li>Text: A string (e.g., \"Home\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.TextView[@text=\"Home\"]</code>).</li> <li>Image: An image filename (e.g., \"home.png\").</li> <li><code>direction</code>: Swipe direction (\"up\", \"down\", \"left\", \"right\").</li> <li><code>timeout</code>: Maximum time in seconds to swipe (integer, e.g., 15).</li> <li><code>event_name</code> (optional): A string identifier for the swipe event (e.g., \"scroll_to_home\").</li> </ul> </li> <li> <p>Example: <code>Swipe Until Element Appears,${Home_image},down,15,scroll_to_home</code></p> </li> <li> <p>Swipe From Element   Swipes starting from a specified element.</p> </li> <li>Parameters:<ul> <li><code>element</code>: The starting element:</li> <li>Text: A string (e.g., \"Subscriptions\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.TextView[@text=\"Subscriptions\"]</code>).</li> <li>Image: An image filename (e.g., \"sub.jpeg\").</li> <li><code>direction</code>: Swipe direction (\"up\", \"down\", \"left\", \"right\").</li> <li><code>swipe_length</code>: Distance of the swipe in pixels (integer, e.g., 50).</li> <li><code>event_name</code> (optional): A string identifier for the swipe event (e.g., \"swipe_left\").</li> </ul> </li> <li> <p>Example: <code>Swipe From Element,${Subscriptions_text},left,50,swipe_left</code></p> </li> <li> <p>Scroll   Performs a scroll action in a specified direction.</p> </li> <li>Parameters:<ul> <li><code>direction</code>: Scroll direction (\"up\", \"down\", \"left\", \"right\").</li> <li><code>event_name</code> (optional): A string identifier for the scroll event (e.g., \"scroll_down\").</li> </ul> </li> <li> <p>Example: <code>Scroll,down,scroll_down</code></p> </li> <li> <p>Scroll Until Element Appears   Scrolls in a direction until an element appears or timeout is reached.</p> </li> <li>Parameters:<ul> <li><code>element</code>: The target element:</li> <li>Text: A string (e.g., \"Home\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.TextView[@text=\"Home\"]</code>).</li> <li>Image: An image filename (e.g., \"home.png\").</li> <li><code>direction</code>: Scroll direction (\"up\", \"down\", \"left\", \"right\").</li> <li><code>timeout</code>: Maximum time in seconds to scroll (integer, e.g., 20).</li> <li><code>event_name</code> (optional): A string identifier for the scroll event (e.g., \"scroll_to_top\").</li> </ul> </li> <li> <p>Example: <code>Scroll Until Element Appears,${Home_xpath},up,20,scroll_to_top</code></p> </li> <li> <p>Scroll From Element   Scrolls starting from a specified element.</p> </li> <li>Parameters:<ul> <li><code>element</code>: The starting element:</li> <li>Text: A string (e.g., \"Subscriptions\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.TextView[@text=\"Subscriptions\"]</code>).</li> <li>Image: An image filename (e.g., \"sub.jpeg\").</li> <li><code>direction</code>: Scroll direction (\"up\", \"down\", \"left\", \"right\").</li> <li><code>scroll_length</code>: Distance of the scroll in pixels (integer, e.g., 100).</li> <li><code>event_name</code> (optional): A string identifier for the scroll event (e.g., \"scroll_right\").</li> </ul> </li> <li> <p>Example: <code>Scroll From Element,${Subscriptions_image},right,100,scroll_right</code></p> </li> <li> <p>Enter Text   Enters text into a specified element.</p> </li> <li>Parameters:<ul> <li><code>element</code>: The input field:</li> <li>Text: A string (e.g., \"Search\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.EditText</code>).</li> <li>Image: An image filename (e.g., \"search_field.png\").</li> <li><code>text</code>: The text to enter (string, e.g., \"Hello World\").</li> <li><code>event_name</code> (optional): A string identifier for the input event (e.g., \"search_input\").</li> </ul> </li> <li> <p>Example: <code>Enter Text,${search_field_xpath},Hello World,search_input</code></p> </li> <li> <p>Enter Text Direct   Enters text without the need of a specified element or input field. Does not support special keys.</p> </li> <li>Parameters:<ul> <li><code>text</code>: The text to enter (string, e.g., \"Hello World\").</li> <li><code>event_name</code> (optional): A string identifier for the input event (e.g., \"search_input\").</li> </ul> </li> <li> <p>Example: <code>Enter Text Direct,Hello World,search_input</code></p> </li> <li> <p>Enter Text Using Keyboard   Enters text or special keys such as Enter, Tab, Space, Backspace using the keyboard, supported for appium and selenium.</p> </li> <li>Parameters:<ul> <li><code>text or special key</code>: The text to enter (string, e.g., \"Test Input\") or special key in angle brackets (e.g., \"\", \"\"). <li><code>event_name</code> (optional): A string identifier for the input event (e.g., \"keyboard_input\").</li> <li> <p>Example: <code>Enter Text Using Keyboard,Test Input&lt;enter&gt;,keyboard_input</code></p> </li> <li> <p>Enter Number   Enters a number into a specified element.</p> </li> <li>Parameters:<ul> <li><code>element</code>: The input field:</li> <li>Text: A string (e.g., \"Quantity\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.EditText</code>).</li> <li>Image: An image filename (e.g., \"quantity_field.png\").</li> <li><code>number</code>: The number to enter (float or integer, e.g., 42).</li> <li><code>event_name</code> (optional): A string identifier for the input event (e.g., \"number_input\").</li> </ul> </li> <li> <p>Example: <code>Enter Number,${quantity_field_xpath},42,number_input</code></p> </li> <li> <p>Press Keycode   Presses a specified keycode (e.g., Android keycodes).</p> </li> <li>Parameters:<ul> <li><code>keycode</code>: The keycode to press (integer, e.g., 66 for Enter on Android).</li> <li><code>event_name</code>: A string identifier for the key press event (e.g., \"enter_key\").</li> </ul> </li> <li> <p>Example: <code>Press Keycode,66,enter_key</code></p> </li> <li> <p>Clear Element Text   Clears text from a specified element.</p> </li> <li>Parameters:<ul> <li><code>element</code>: The input field to clear:</li> <li>Text: A string (e.g., \"Search\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.EditText</code>).</li> <li>Image: An image filename (e.g., \"search_field.png\").</li> <li><code>event_name</code> (optional): A string identifier for the clear event (e.g., \"clear_input\").</li> </ul> </li> <li> <p>Example: <code>Clear Element Text,${input_field_xpath},clear_input</code></p> </li> <li> <p>Get Text   Retrieves text from a specified element (returns None if not supported).</p> </li> <li>Parameters:<ul> <li><code>element</code>: The target element:</li> <li>Text: A string (e.g., \"Title\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.TextView[@text=\"Title\"]</code>).</li> <li>Image: Not supported (use text/XPath only).</li> </ul> </li> <li> <p>Example: <code>Get Text,${title_xpath}</code></p> </li> <li> <p>Sleep   Pauses execution for a specified duration.</p> </li> <li>Parameters:<ul> <li><code>duration</code>: Time to sleep in seconds (integer, e.g., 5).</li> </ul> </li> <li>Example: <code>Sleep,5</code></li>"},{"location":"usage/keyword_usage/#app-management-keywords","title":"App Management Keywords","text":"<p>These keywords manage application lifecycle operations.</p> <ul> <li>Initialise Setup   Sets up the environment for the driver module.</li> <li>Parameters: None</li> <li> <p>Example: <code>Initialise Setup</code></p> </li> <li> <p>Launch App   Launches the configured application (as defined in <code>config.yaml</code>).</p> </li> <li>Parameters:<ul> <li><code>app_identifier</code> (optional): App package/bundle name (string, e.g., \"com.example.app\")</li> <li><code>app_activity</code> (optional): App activity name (string, e.g., \"MainActivity\")</li> <li><code>event_name</code> (optional): A string identifier for the launch event (e.g., \"app_start\")</li> </ul> </li> <li> <p>Example: <code>Launch App,com.example.app,MainActivity,app_start</code></p> </li> <li> <p>Start Appium Session (Deprecated)   Starts an Appium session (same as <code>Launch App</code> for Appium).</p> </li> <li>Parameters:<ul> <li><code>event_name</code> (optional): A string identifier for the session event (e.g., \"session_start\").</li> </ul> </li> <li> <p>Example: <code>Start Appium Session,session_start</code></p> </li> <li> <p>Launch Other App   Starts another application by bundle ID.</p> </li> <li>Parameters:<ul> <li><code>bundleid</code>: The bundle/package ID of the app (string, e.g., \"com.example.app\")</li> </ul> </li> <li> <p>Example: <code>Launch Other App,com.example.app</code></p> </li> <li> <p>Close And Terminate App   Closes and terminates the current application.</p> </li> <li>Parameters: None</li> <li> <p>Example: <code>Close And Terminate App</code></p> </li> <li> <p>Force Terminate App   Forcefully terminates the specified application.</p> </li> <li>Parameters:<ul> <li><code>app_name</code>: The name or package of the app to terminate (string, e.g., \"com.example.app\")</li> <li><code>event_name</code> (optional): A string identifier for the termination event (e.g., \"force_stop\")</li> </ul> </li> <li> <p>Example: <code>Force Terminate App,com.example.app,force_stop</code></p> </li> <li> <p>Get App Version   Retrieves the version of the application (returns None if not available).</p> </li> <li>Parameters: None</li> <li>Example: <code>Get App Version</code></li> </ul>"},{"location":"usage/keyword_usage/#flow-control-keywords","title":"Flow Control Keywords","text":"<p>These keywords manage test flow, such as loops and conditions.</p> <ul> <li>Execute Module   Executes a named module from <code>test_modules.csv</code>.</li> <li>Parameters:<ul> <li><code>module_name</code>: The name of the module to execute (string, e.g., \"Interact using text\").</li> </ul> </li> <li> <p>Example: <code>Execute Module,Interact using text</code></p> </li> <li> <p>Run Loop   Runs a loop over a target module, either by count or with variables.</p> </li> <li>Parameters:<ul> <li><code>target</code>: The module to loop over (string, e.g., \"Dynamic Launch\").</li> <li>For count-based:</li> <li><code>count</code>: Number of iterations (integer, e.g., 3).</li> <li>For variable-based:</li> <li><code>var1</code>, <code>iterable1</code>, <code>var2</code>, <code>iterable2</code>, ...: Pairs of variable names (e.g., <code>${METHOD}</code>) and iterables (e.g., <code>[\"xpath\",\"text\"]</code> or a JSON string like <code>\"['text','xpath']\"</code>).</li> </ul> </li> <li> <p>Examples:</p> <ul> <li>Count-based: <code>Run Loop,Dynamic Launch,3</code></li> <li>Variable-based: <code>Run Loop,Dynamic Launch,${METHOD},${List}</code></li> </ul> </li> <li> <p>Condition   Evaluates conditions and executes the corresponding target module.</p> </li> <li>Parameters:<ul> <li><code>condition1</code>: A condition expression (string, e.g., <code>${METHOD} == 'text'</code>) using variables from <code>elements.csv</code>.</li> <li><code>target1</code>: The module to execute if <code>condition1</code> is true (string, e.g., \"Interact using text\").</li> <li><code>condition2</code>, <code>target2</code>, ...: Additional condition-target pairs (optional).</li> <li><code>else_target</code> (optional): The module to execute if no conditions are true (string, e.g., \"Interact using images\").</li> </ul> </li> <li> <p>Example: <code>Condition,${METHOD} == 'text',Interact using text,${METHOD} == 'xpath',Interact using xpath,Interact using images</code></p> </li> <li> <p>Read Data   Reads data from a file, environment variable, list, or API, with optional query string for filtering/selection.</p> </li> <li> <p>Parameters:</p> <ul> <li><code>input_element</code>: Variable to store the data (e.g., <code>${List}</code>)</li> <li><code>file_path</code>: Data source (CSV file, JSON file, ENV:VAR, list, or URL)</li> <li><code>query</code> (optional): Query string for filtering/selection (e.g., <code>status=active;columns=name</code>)</li> </ul> </li> <li>Example: <code>Read Data,${List},optics_framework/samples/contact/elements.csv,status=active;columns=name</code></li> <li> <p>Example: <code>Read Data,${List},ENV:CONTACT_NAME</code></p> </li> <li> <p>Invoke API   Invokes an API call defined in the session's API config, with variable substitution and response extraction.</p> </li> <li>Parameters:<ul> <li><code>api_name</code>: API to invoke (format: <code>collection.api_name</code>, e.g., <code>login.auth_token</code>)</li> </ul> </li> <li>Example: <code>Invoke API,login.auth_token</code></li> <li> <p>Example: <code>Invoke API,login.send_otp</code></p> </li> <li> <p>Evaluate   Evaluates an expression and stores the result in a variable.</p> </li> <li>Parameters:<ul> <li><code>param1</code>: The variable to store the result (string, e.g., <code>${result}</code>; typically in <code>${name}</code> format).</li> <li><code>param2</code>: The expression to evaluate (string, e.g., <code>${count} + 1</code>), using variables from <code>elements.csv</code>.</li> </ul> </li> <li>Example: <code>Evaluate,${result},${count} + 1</code></li> </ul>"},{"location":"usage/keyword_usage/#verification-keywords","title":"Verification Keywords","text":"<p>These keywords verify elements, screens, and data.</p> <ul> <li>Validate Element   Verifies the presence of an element.</li> <li>Parameters:<ul> <li><code>element</code>: The element to verify:</li> <li>Text: A string (e.g., \"Home\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.TextView[@text=\"Home\"]</code>).</li> <li>Image: An image filename (e.g., \"home.png\").</li> <li><code>timeout</code> (optional, default=10): Maximum time in seconds to wait (integer).</li> <li><code>rule</code> (optional, default=\"all\"): Verification rule (\"all\" or \"any\"; \"all\" requires all elements if multiple, \"any\" requires at least one).</li> <li><code>event_name</code> (optional): A string identifier for the verification event (e.g., \"check_home\").</li> </ul> </li> <li> <p>Example: <code>Validate Element,${Home_xpath},5,any,check_home</code></p> </li> <li> <p>Is Element   Checks if an element is in a specified state (unimplemented).</p> </li> <li>Parameters:<ul> <li><code>element</code>: The element to check:</li> <li>Text: A string (e.g., \"Button\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.Button</code>).</li> <li>Image: An image filename (e.g., \"button.png\").</li> <li><code>element_state</code>: The state to verify (string: \"visible\", \"invisible\", \"enabled\", \"disabled\").</li> <li><code>timeout</code>: Maximum time in seconds to wait (integer, e.g., 10).</li> <li><code>event_name</code> (optional): A string identifier for the check event (e.g., \"check_button\").</li> </ul> </li> <li> <p>Example: <code>Is Element,${button_xpath},visible,10,check_button</code></p> </li> <li> <p>Assert Equality   Compares two values for equality (unimplemented).</p> </li> <li>Parameters:<ul> <li><code>output</code>: The first value to compare (string or variable, e.g., <code>${result}</code>).</li> <li><code>expression</code>: The second value to compare (string or expression, e.g., \"42\").</li> <li><code>event_name</code> (optional): A string identifier for the comparison event (e.g., \"verify_result\").</li> </ul> </li> <li> <p>Example: <code>Assert Equality,${result},42,verify_result</code></p> </li> <li> <p>Assert Presence   Asserts the presence of one or more elements.</p> </li> <li>Parameters:<ul> <li><code>elements</code>: Comma-separated elements to check:</li> <li>Text: A string (e.g., \"Home\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.TextView[@text=\"Home\"]</code>).</li> <li>Image: An image filename (e.g., \"home.png\").</li> <li>Example: <code>${Subscriptions_text},${Home_xpath}</code>.</li> <li><code>timeout</code> (optional, default=30): Maximum time in seconds to wait (integer).</li> <li><code>rule</code> (optional, default=\"any\"): Verification rule (\"any\" or \"all\").</li> <li><code>event_name</code> (optional): A string identifier for the assertion event (e.g., \"verify_screen\").</li> </ul> </li> <li> <p>Example: <code>Assert Presence,${Subscriptions_text},${Home_xpath},10,all,verify_screen</code></p> </li> <li> <p>Validate Screen   Verifies the screen by checking element presence (alias for <code>Assert Presence</code>).</p> </li> <li>Parameters:<ul> <li><code>elements</code>: Comma-separated elements to verify:</li> <li>Text: A string (e.g., \"Home\").</li> <li>XPath: An XPath (e.g., <code>//android.widget.TextView[@text=\"Home\"]</code>).</li> <li>Image: An image filename (e.g., \"home.png\").</li> <li>Example: <code>${Home_image},${Subscriptions_image}</code>.</li> <li><code>timeout</code> (optional, default=30): Maximum time in seconds to wait (integer).</li> <li><code>rule</code> (optional, default=\"any\"): Verification rule (\"any\" or \"all\").</li> <li><code>event_name</code> (optional): A string identifier for the verification event (e.g., \"check_screen\").</li> </ul> </li> <li>Example: <code>Validate Screen,${Home_image},${Subscriptions_image},15,any,check_screen</code></li> </ul>"},{"location":"usage/keyword_usage/#additional-information","title":"Additional Information","text":"<p>Element Types</p> <p>Many keywords accept <code>element</code> parameters that can be: - Text: A literal string or variable (e.g., \"Home\", <code>${Home_text}</code>) for OCR-based detection. - XPath: An XPath expression (e.g., <code>//android.widget.Button[@resource-id=\"id\"]</code>) for Appium/Selenium. - Image: A filename from <code>input_templates/</code> (e.g., \"home.png\", <code>${Home_image}</code>) for image matching. Check each keyword\u2019s description for supported types.</p> <p>Parameters</p> <p>Optional parameters can be left blank in the CSV (e.g., <code>Press Element,${Home_text},,,click_event</code> skips <code>repeat</code>, <code>offset_x</code>, and <code>offset_y</code>).</p> <p>Deprecated Keywords</p> <p>Keywords marked with (Deprecated) (e.g., <code>Press Checkbox</code>) should be avoided in new tests as they may be removed in future versions. Use alternatives like <code>Press Element</code> instead.</p> <p>Unimplemented Keywords</p> <p>Some keywords (e.g., <code>Select Dropdown Option</code>) are placeholders and not yet functional. They are included for future compatibility.</p> <p>Usage in CSV</p> <p>Keywords are used in the <code>module_step</code> column of <code>test_modules.csv</code>, with parameters in subsequent columns (e.g., <code>param_1</code>, <code>param_2</code>, ...).</p> <p>Variables</p> <p>Parameters like <code>${Home_text}</code> reference values from <code>elements.csv</code>, allowing reusable element definitions.</p> <p>Refer to the User Workflow for examples of how to integrate these keywords into your test modules.</p>"},{"location":"usage/usage/","title":"Usage","text":"<p>The Usage section of the Optics Framework documentation provides detailed guidance on how to interact with and leverage the framework effectively. Whether you\u2019re setting up test automation, executing test cases, or integrating keywords into your workflows, this section covers the essential tools and processes you need to get started and succeed.</p> <p>Below are the two primary usage guides, each tailored to a specific aspect of the framework:</p> <ul> <li> <p>CLI Usage Learn how to use the Optics Framework\u2019s command-line interface (CLI) to set up the environment, execute test cases, initialize projects, and manage configurations.</p> </li> <li> <p>Keyword Usage Explore the available keywords for defining test steps in test modules, including actions, verifications, and flow control operations, with detailed parameter explanations.</p> </li> </ul>"}]}